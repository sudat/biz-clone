# 会計システム PRD（Product Requirements Document）

## プロジェクト概要
Next.js ベースの会計システムを構築する。主な機能は仕訳の作成、照会、更新である。
TaskMaster AI を活用した AI 支援開発手法により効率的な開発を行う。

## システム要件

### 技術スタック
- **フレームワーク**: Next.js 15.3.3 (App Router)
- **UI**: React 19, TypeScript, Tailwind CSS, Shadcn/UI
- **バックエンド**: Server Actions, Zod バリデーション
- **データベース**: PostgreSQL + Prisma ORM
- **開発支援**: TaskMaster AI, Cursor IDE, MCP 統合
- **テスト**: Playwright (E2E), Jest (Unit)

### TaskMaster 統合開発要件
- **自動タスク生成**: 本 PRD から実装可能なタスク群を AI が自動生成
- **複雑度分析**: 各タスクの複雑度を分析し、適切な分解レベルを提案
- **依存関係管理**: タスク間の依存関係を自動で管理・可視化
- **実装記録**: 各サブタスクに実装過程を詳細に記録し、学習効果を最大化
- **品質向上**: AI 支援による実装パターンの分析と改善提案

### 全体レイアウト
- 最上部にトップレベルメニューを配置（初期はBizメニューのみ）
- Bizにカーソルオーバーで「仕訳入力」がLv2メニューとして表示
- 仕訳入力にカーソルオーバーで「仕訳作成」「仕訳照会」がメニューとして表示
- 各メニュー項目をクリックすることで対応ページに遷移
- レスポンシブデザイン対応（モバイル、タブレット、デスクトップ）

### 機能要件

#### 1. 仕訳作成ページ (URL: /siwake/new)
**画面構成:**
- 画面最上部：保存ボタン、クリアボタン
- 画面上部：伝票ヘッダ部
- 画面中央：仕訳入力欄（借方・貸方）
- 画面最下部：仕訳行表示欄、合計金額表示

**伝票ヘッダ部:**
- 仕訳計上日（必須、日付ピッカー対応）
- 伝票摘要（任意、200 文字まで）
- 仕訳番号（表示のみ、初期は空欄、保存時自動採番）

**仕訳入力欄:**
- 借方（左側）と貸方（右側）の 2 列構成
- 入力項目：
  - 勘定科目コード（必須、コード入力またはドロップダウン選択）
  - 勘定科目名（自動表示、編集不可）
  - 補助科目コード（任意、勘定科目に応じて表示）
  - 補助科目名（自動表示、編集不可）
  - 取引先コード（任意、コード入力またはドロップダウン選択）
  - 取引先名（自動表示、編集不可）
  - 分析コード（任意、プロジェクト・部門等の管理）
  - 明細摘要（任意、100 文字まで）
  - 金額（必須、数値入力、3 桁区切り表示）

**仕訳行表示欄:**
- 複数行の仕訳を 1 行目、2 行目、3 行目として表示
- 表示項目：勘定科目名・コード、補助科目名・コード、取引先名、金額
- 借方合計・貸方合計の自動計算・表示
- 貸借バランスチェック機能

**バリデーション機能:**
- 貸借の金額バランスチェック（Zod スキーマによる厳密な検証）
- 必須項目の入力チェック（TypeScript 型レベルでの保証）
- 勘定科目コードの存在チェック（Prisma による DB 制約）
- 金額の妥当性チェック（負の値、過大値の防止）
- リアルタイムバリデーション（入力時の即座フィードバック）

**保存機能:**
- 保存ボタン押下で仕訳データを保存（Server Actions による処理）
- 仕訳番号を YYYYMMDDXXXXXXX 形式で自動採番（XXXXXXX はインクリメント）
- 保存成功時は確認メッセージ表示（Toast 通知）
- エラー時は具体的なエラーメッセージ表示（フィールド単位のエラー表示）

#### 2. 仕訳照会ページ (URL: /siwake/[仕訳番号])
**画面構成:**
- 画面最上部：更新ボタン、削除ボタン、コピー作成ボタン
- 仕訳データの表示（仕訳作成ページと同様のレイアウト、表示専用）
- 作成日時・更新日時の表示

**機能:**
- 更新ボタン押下で仕訳更新ページに遷移
- 削除ボタン押下で削除確認ダイアログ表示後、該当仕訳を削除
- コピー作成ボタンで既存仕訳をベースに新規仕訳作成画面へ遷移
- 仕訳履歴の表示（更新履歴がある場合）

#### 3. 仕訳更新ページ (URL: /siwake/update/[仕訳番号])
**画面構成:**
- 画面最上部：保存ボタン、キャンセルボタン
- 既存仕訳データが入力された状態で表示
- 仕訳作成ページと同様の入力欄

**機能:**
- 既存データの編集・更新が可能
- 保存ボタン押下で更新内容を保存
- キャンセルボタンで照会画面に戻る
- 更新履歴の記録

#### 4. 仕訳一覧・検索ページ (URL: /siwake)
**画面構成:**
- 検索条件入力欄
- 検索結果一覧表示
- ページネーション機能

**検索条件:**
- 仕訳計上日（期間指定）
- 勘定科目
- 取引先
- 金額範囲
- 摘要キーワード検索

**一覧表示項目:**
- 仕訳番号
- 計上日
- 勘定科目（借方・貸方）
- 金額
- 摘要
- 作成者・作成日時

#### 5. マスタ管理機能
**勘定科目マスタ (URL: /master/accounts)**
- 勘定科目の登録、編集、削除
- 階層構造対応
- 科目タイプ（資産、負債、純資産、収益、費用）

**取引先マスタ (URL: /master/partners)**
- 取引先の登録、編集、削除
- 取引先分類（得意先、仕入先、その他）

**補助科目マスタ (URL: /master/sub-accounts)**
- 補助科目の登録、編集、削除
- 親勘定科目との関連付け

## 技術要件

### フロントエンド仕様
- **Next.js App Router**: ファイルベースルーティング
- **TypeScript**: 型安全性の確保
- **Tailwind CSS**: レスポンシブデザイン
- **Shadcn/UI**: 統一されたUIコンポーネント
- **React Hook Form**: フォーム管理
- **Zod**: クライアントサイドバリデーション

### バックエンド仕様
- **Server Actions**: サーバーサイド処理
- **Prisma ORM**: データベースアクセス
- **Zod**: サーバーサイドバリデーション
- **PostgreSQL**: ACID特性を活用したデータ整合性確保

### セキュリティ要件
- **認証**: NextAuth.js による認証機能
- **認可**: ページ・機能レベルでのアクセス制御
- **入力検証**: XSS、SQLインジェクション対策
- **CSRF対策**: Next.jsの標準機能を活用

### パフォーマンス要件
- **初期表示**: 2秒以内
- **検索機能**: 1000件のデータで1秒以内
- **同時ユーザー**: 最大50名
- **データ容量**: 10万件の仕訳データに対応

## データ構造

### 仕訳テーブル (Journal)
```prisma
model Journal {
  id            String   @id @default(cuid())
  journalNumber String   @unique // 仕訳番号 (YYYYMMDDXXXXXXX)
  journalDate   DateTime // 仕訳計上日
  description   String?  // 伝票摘要 (200文字まで)
  totalAmount   Decimal  // 合計金額
  status        JournalStatus @default(DRAFT) // ステータス
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   // 作成者
  updatedBy     String   // 更新者
  
  // リレーション
  entries       JournalEntry[]
  
  @@map("journals")
}

enum JournalStatus {
  DRAFT     // 下書き
  CONFIRMED // 確定
  DELETED   // 削除
}
```

### 仕訳明細テーブル (JournalEntry)
```prisma
model JournalEntry {
  id             String      @id @default(cuid())
  journalId      String      // 仕訳ID
  lineNumber     Int         // 行番号
  debitCredit    DebitCredit // 借方・貸方区分
  accountId      String      // 勘定科目ID
  subAccountId   String?     // 補助科目ID
  partnerId      String?     // 取引先ID
  analysisCodeId String?     // 分析コードID
  description    String?     // 明細摘要 (100文字まで)
  amount         Decimal     // 金額
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // リレーション
  journal       Journal      @relation(fields: [journalId], references: [id], onDelete: Cascade)
  account       Account      @relation(fields: [accountId], references: [id])
  subAccount    SubAccount?  @relation(fields: [subAccountId], references: [id])
  partner       Partner?     @relation(fields: [partnerId], references: [id])
  analysisCode  AnalysisCode? @relation(fields: [analysisCodeId], references: [id])
  
  @@map("journal_entries")
}

enum DebitCredit {
  DEBIT  // 借方
  CREDIT // 貸方
}
```

### 勘定科目マスタ (Account)
```prisma
model Account {
  id          String      @id @default(cuid())
  accountCode String      @unique // 勘定科目コード (3-10文字)
  accountName String      // 勘定科目名
  accountType AccountType // 科目タイプ
  parentId    String?     // 親科目ID
  level       Int         // 階層レベル (1-5)
  isDetail    Boolean     // 明細科目フラグ
  isActive    Boolean     @default(true) // 有効フラグ
  sortOrder   Int         // 表示順序
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // リレーション
  parent       Account?        @relation("AccountHierarchy", fields: [parentId], references: [id])
  children     Account[]       @relation("AccountHierarchy")
  subAccounts  SubAccount[]
  journalEntries JournalEntry[]
  
  @@map("accounts")
}

enum AccountType {
  ASSET     // 資産
  LIABILITY // 負債
  EQUITY    // 純資産
  REVENUE   // 収益
  EXPENSE   // 費用
}
```

### 取引先マスタ (Partner)
```prisma
model Partner {
  id          String      @id @default(cuid())
  partnerCode String      @unique // 取引先コード
  partnerName String      // 取引先名
  partnerType PartnerType // 取引先分類
  isActive    Boolean     @default(true) // 有効フラグ
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // リレーション
  journalEntries JournalEntry[]
  
  @@map("partners")
}

enum PartnerType {
  CUSTOMER // 得意先
  VENDOR   // 仕入先
  OTHER    // その他
}
```

### 補助科目マスタ (SubAccount)
```prisma
model SubAccount {
  id             String   @id @default(cuid())
  subAccountCode String   // 補助科目コード
  subAccountName String   // 補助科目名
  accountId      String   // 親勘定科目ID
  isActive       Boolean  @default(true) // 有効フラグ
  sortOrder      Int      // 表示順序
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // リレーション
  account        Account        @relation(fields: [accountId], references: [id])
  journalEntries JournalEntry[]
  
  @@unique([accountId, subAccountCode])
  @@map("sub_accounts")
}
```

### 分析コードマスタ (AnalysisCode)
```prisma
model AnalysisCode {
  id               String   @id @default(cuid())
  analysisCodeType String   // 分析コード種別 (部門、プロジェクト等)
  analysisCode     String   // 分析コード
  analysisName     String   // 分析コード名
  isActive         Boolean  @default(true) // 有効フラグ
  sortOrder        Int      // 表示順序
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // リレーション
  journalEntries   JournalEntry[]
  
  @@unique([analysisCodeType, analysisCode])
  @@map("analysis_codes")
}
```


## TaskMaster 統合開発要件

### AI 支援開発プロセス
- **タスク自動生成**: 本 PRD から TaskMaster が実装タスクを自動生成
- **複雑度分析**: 各機能の実装複雑度を分析し、適切な分解を実施
- **依存関係管理**: 機能間の依存関係を自動管理
- **進捗追跡**: 実装進捗をリアルタイムで追跡

### 品質管理要件
- **実装パターン学習**: 過去の実装から最適パターンを学習・適用
- **コードレビュー支援**: AI 支援によるコード品質チェック
- **テストケース生成**: 機能に応じたテストケースの自動生成提案
- **ドキュメント同期**: 実装とドキュメントの自動整合性維持

### 開発環境統合
- **Cursor IDE**: MCP 統合によるシームレスな AI 支援
- **自動化ワークフロー**: コミット、テスト、デプロイの自動化
- **品質メトリクス**: コード品質、テストカバレッジの継続監視

## 品質要件

### 機能品質
- **正確性**: 複式簿記の原則に従った正確な仕訳処理
- **整合性**: データベース制約による整合性確保
- **可用性**: 99.9%の稼働率
- **セキュリティ**: 業界標準のセキュリティ対策実装

### 非機能品質
- **使いやすさ**: 直感的なユーザーインターフェース
- **レスポンシブ**: 各デバイスでの最適表示
- **アクセシビリティ**: WCAG 2.1 AA準拠
- **保守性**: 明確なアーキテクチャによる保守容易性

### テスト要件
- **単体テスト**: 90%以上のカバレッジ
- **統合テスト**: API・データベース連携テスト
- **E2Eテスト**: ユーザーシナリオの自動テスト
- **パフォーマンステスト**: 負荷テストによる性能検証

## 実装優先順位

### Phase 1: 基盤構築（TaskMaster 統合）
1. **TaskMaster プロジェクト初期化**
   - `task-master init` による基本構造作成
   - 本 PRD からの自動タスク生成 (`task-master parse-prd`)
   - 複雑度分析による実装計画策定
2. **開発環境構築**
   - Next.js 15.3.3 + React 19 セットアップ
   - Prisma + PostgreSQL 環境構築
   - Cursor IDE + MCP 統合設定
3. **データベース設計**
   - Prisma スキーマ作成（上記データ構造に基づく）
   - マイグレーション実行
   - 初期マスタデータ投入

### Phase 2: 基本機能（AI 支援実装）
1. **マスタ管理機能**
   - 勘定科目マスタ CRUD（Server Actions + Zod バリデーション）
   - 取引先マスタ CRUD
   - 補助科目・分析コードマスタ CRUD
2. **仕訳作成機能**
   - 仕訳入力フォーム（Shadcn/UI コンポーネント）
   - リアルタイムバリデーション
   - 貸借バランスチェック
   - 自動採番機能

### Phase 3: 拡張機能（品質向上）
1. **仕訳照会・検索機能**
   - 仕訳一覧表示（ページネーション対応）
   - 高度な検索・フィルタリング
   - ソート機能
2. **UI/UX 改善**
   - レスポンシブデザイン対応
   - アクセシビリティ向上
   - パフォーマンス最適化

### Phase 4: 運用・保守（継続的改善）
1. **テスト・品質保証**
   - Unit テスト（Jest）
   - E2E テスト（Playwright）
   - TaskMaster 統合テスト
2. **運用機能**
   - ログ機能・監査証跡
   - エラーハンドリング強化
   - セキュリティ対策

## 成功指標

### 技術指標
- **開発速度**: TaskMaster 活用による 30% の開発効率向上
- **品質指標**: バグ発生率 10% 以下
- **テストカバレッジ**: 90% 以上維持
- **パフォーマンス**: 全画面 2 秒以内の初期表示

### ビジネス指標
- **ユーザー満足度**: 4.0/5.0 以上
- **操作習得時間**: 新規ユーザー 30 分以内
- **データ正確性**: 仕訳エラー率 0.1% 以下
- **システム稼働率**: 99.9% 以上

### TaskMaster 統合効果指標
- **タスク自動生成精度**: 手動修正率 20% 以下
- **実装時間短縮**: 従来比 40% 削減
- **コード品質向上**: 静的解析スコア 8.5/10 以上
- **学習効果**: 開発者スキル向上度 30% 向上

## 制約事項・前提条件

### 技術制約
- PostgreSQL 15 以上必須
- Node.js 20 以上必須
- モダンブラウザ対応（IE11 非対応）
- TaskMaster AI 利用のため各種 API キー必須

### ビジネス制約
- 日本の会計基準準拠
- 複式簿記原則の厳格な適用
- 個人情報保護法対応

### 運用制約
- 月次バックアップ必須
- セキュリティアップデート即座適用
- 利用ログの保管義務（3 年間）
- TaskMaster 設定ファイルのバージョン管理必須 