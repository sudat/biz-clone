# 会計システム PRD（Product Requirements Document）

## プロジェクト概要
Next.jsベースの会計システムを構築する。主な機能は仕訳の作成、照会、更新である。
TaskMaster AIを活用したAI支援開発手法により効率的な開発を行う。

## システム要件

### 技術スタック
- **フレームワーク**: Next.js 15.3.3 (App Router)
- **UI**: React 19, TypeScript, Tailwind CSS, Shadcn/UI
- **バックエンド**: Server Actions, Zod バリデーション
- **データベース**: PostgreSQL + Prisma ORM
- **開発支援**: TaskMaster AI, Cursor IDE, MCP統合
- **テスト**: Playwright (E2E), Jest (Unit)

### 全体レイアウト
- 最上部にトップレベルメニューを配置（初期はBizメニューのみ）
- Bizにカーソルオーバーで「仕訳入力」がLv2メニューとして表示
- 仕訳入力にカーソルオーバーで「仕訳作成」「仕訳照会」がメニューとして表示
- 各メニュー項目をクリックすることで対応ページに遷移
- レスポンシブデザイン対応（モバイル、タブレット、デスクトップ）

### 機能要件

#### 1. 仕訳作成ページ (URL: /siwake/new)
**画面構成:**
- 画面最上部：保存ボタン、クリアボタン
- 画面上部：伝票ヘッダ部
- 画面中央：仕訳入力欄（借方・貸方）
- 画面最下部：仕訳行表示欄、合計金額表示

**伝票ヘッダ部:**
- 仕訳計上日（必須、日付ピッカー対応）
- 伝票摘要（任意、200文字まで）
- 仕訳番号（表示のみ、初期は空欄、保存時自動採番）

**仕訳入力欄:**
- 借方（左側）と貸方（右側）の2列構成
- 入力項目：
  - 勘定科目コード（必須、コード入力またはドロップダウン選択）
  - 勘定科目名（自動表示、編集不可）
  - 補助科目コード（任意、勘定科目に応じて表示）
  - 補助科目名（自動表示、編集不可）
  - 取引先コード（任意、コード入力またはドロップダウン選択）
  - 取引先名（自動表示、編集不可）
  - 分析コード（任意、プロジェクト・部門等の管理）
  - 明細摘要（任意、100文字まで）
  - 金額（必須、数値入力、3桁区切り表示）

**仕訳行表示欄:**
- 複数行の仕訳を1行目、2行目、3行目として表示
- 表示項目：勘定科目名・コード、補助科目名・コード、取引先名、金額
- 借方合計・貸方合計の自動計算・表示
- 貸借バランスチェック機能

**バリデーション機能:**
- 貸借の金額バランスチェック
- 必須項目の入力チェック
- 勘定科目コードの存在チェック
- 金額の妥当性チェック（負の値、過大値の防止）

**保存機能:**
- 保存ボタン押下で仕訳データを保存
- 仕訳番号をYYYYMMDDxxxxxxx形式で自動採番（xxxxxxxはインクリメント）
- 保存成功時は確認メッセージ表示
- エラー時は具体的なエラーメッセージ表示

#### 2. 仕訳照会ページ (URL: /siwake/[仕訳番号])
**画面構成:**
- 画面最上部：更新ボタン、削除ボタン、コピー作成ボタン
- 仕訳データの表示（仕訳作成ページと同様のレイアウト、表示専用）
- 作成日時・更新日時の表示

**機能:**
- 更新ボタン押下で仕訳更新ページに遷移
- 削除ボタン押下で削除確認ダイアログ表示後、該当仕訳を削除
- コピー作成ボタンで既存仕訳をベースに新規仕訳作成画面へ遷移
- 仕訳履歴の表示（更新履歴がある場合）

#### 3. 仕訳更新ページ (URL: /siwake/update/[仕訳番号])
**画面構成:**
- 画面最上部：保存ボタン、キャンセルボタン
- 既存仕訳データが入力された状態で表示
- 仕訳作成ページと同様の入力欄

**機能:**
- 既存データの編集・更新が可能
- 保存ボタン押下で更新内容を保存
- キャンセルボタンで照会画面に戻る
- 更新履歴の記録

#### 4. 仕訳一覧・検索ページ (URL: /siwake)
**画面構成:**
- 検索条件入力欄
- 検索結果一覧表示
- ページネーション機能

**検索条件:**
- 仕訳計上日（期間指定）
- 勘定科目
- 取引先
- 金額範囲
- 摘要キーワード検索

**一覧表示項目:**
- 仕訳番号
- 計上日
- 勘定科目（借方・貸方）
- 金額
- 摘要
- 作成者・作成日時

#### 5. マスタ管理機能
**勘定科目マスタ (URL: /master/accounts)**
- 勘定科目の登録、編集、削除
- 階層構造対応
- 科目タイプ（資産、負債、純資産、収益、費用）

**取引先マスタ (URL: /master/partners)**
- 取引先の登録、編集、削除
- 取引先分類（得意先、仕入先、その他）

**補助科目マスタ (URL: /master/sub-accounts)**
- 補助科目の登録、編集、削除
- 親勘定科目との関連付け

## 技術要件

### フロントエンド仕様
- **Next.js App Router**: ファイルベースルーティング
- **TypeScript**: 型安全性の確保
- **Tailwind CSS**: レスポンシブデザイン
- **Shadcn/UI**: 統一されたUIコンポーネント
- **React Hook Form**: フォーム管理
- **Zod**: クライアントサイドバリデーション

### バックエンド仕様
- **Server Actions**: サーバーサイド処理
- **Prisma ORM**: データベースアクセス
- **Zod**: サーバーサイドバリデーション
- **PostgreSQL**: ACID特性を活用したデータ整合性確保

### セキュリティ要件
- **認証**: NextAuth.js による認証機能
- **認可**: ページ・機能レベルでのアクセス制御
- **入力検証**: XSS、SQLインジェクション対策
- **CSRF対策**: Next.jsの標準機能を活用

### パフォーマンス要件
- **初期表示**: 2秒以内
- **検索機能**: 1000件のデータで1秒以内
- **同時ユーザー**: 最大50名
- **データ容量**: 10万件の仕訳データに対応

## データ構造

### 仕訳テーブル (Journal)
- id (UUID, PK)
- journalNumber (String, Unique) - 仕訳番号
- journalDate (Date) - 仕訳計上日
- description (String, Optional) - 伝票摘要
- totalAmount (Decimal) - 合計金額
- status (Enum) - ステータス（下書き、確定、削除）
- createdAt (DateTime)
- updatedAt (DateTime)
- createdBy (String) - 作成者
- updatedBy (String) - 更新者

### 仕訳明細テーブル (JournalEntry)
- id (UUID, PK)
- journalId (UUID, FK) - 仕訳ID
- lineNumber (Integer) - 行番号
- debitCredit (Enum) - 借方・貸方区分
- accountId (UUID, FK) - 勘定科目ID
- subAccountId (UUID, FK, Optional) - 補助科目ID
- partnerId (UUID, FK, Optional) - 取引先ID
- analysisCodeId (UUID, FK, Optional) - 分析コードID
- description (String, Optional) - 明細摘要
- amount (Decimal) - 金額
- createdAt (DateTime)
- updatedAt (DateTime)

### 勘定科目マスタ (Account)
- id (UUID, PK)
- accountCode (String, Unique) - 勘定科目コード
- accountName (String) - 勘定科目名
- accountType (Enum) - 科目タイプ
- parentId (UUID, FK, Optional) - 親科目ID
- level (Integer) - 階層レベル
- isDetail (Boolean) - 明細科目フラグ
- isActive (Boolean) - 有効フラグ
- sortOrder (Integer) - 表示順序
- createdAt (DateTime)
- updatedAt (DateTime)

### 取引先マスタ (Partner)
- id (UUID, PK)
- partnerCode (String, Unique) - 取引先コード
- partnerName (String) - 取引先名
- partnerType (Enum) - 取引先分類
- contactInfo (JSON, Optional) - 連絡先情報
- isActive (Boolean) - 有効フラグ
- createdAt (DateTime)
- updatedAt (DateTime)

### 補助科目マスタ (SubAccount)
- id (UUID, PK)
- subAccountCode (String) - 補助科目コード
- subAccountName (String) - 補助科目名
- accountId (UUID, FK) - 親勘定科目ID
- isActive (Boolean) - 有効フラグ
- sortOrder (Integer) - 表示順序
- createdAt (DateTime)
- updatedAt (DateTime)

### 分析コードマスタ (AnalysisCode)
- id (UUID, PK)
- analysisCode (String, Unique) - 分析コード
- analysisName (String) - 分析名称
- analysisType (Enum) - 分析タイプ（部門、プロジェクト等）
- isActive (Boolean) - 有効フラグ
- createdAt (DateTime)
- updatedAt (DateTime)

## TaskMaster統合開発要件

### AI支援開発プロセス
- **タスク自動生成**: 本PRDからTaskMasterが実装タスクを自動生成
- **複雑度分析**: 各機能の実装複雑度を分析し、適切な分解を実施
- **依存関係管理**: 機能間の依存関係を自動管理
- **進捗追跡**: 実装進捗をリアルタイムで追跡

### 品質管理要件
- **実装パターン学習**: 過去の実装から最適パターンを学習・適用
- **コードレビュー支援**: AI支援によるコード品質チェック
- **テストケース生成**: 機能に応じたテストケースの自動生成提案
- **ドキュメント同期**: 実装とドキュメントの自動整合性維持

### 開発環境統合
- **Cursor IDE**: MCP統合によるシームレスなAI支援
- **自動化ワークフロー**: コミット、テスト、デプロイの自動化
- **品質メトリクス**: コード品質、テストカバレッジの継続監視

## 品質要件

### 機能品質
- **正確性**: 複式簿記の原則に従った正確な仕訳処理
- **整合性**: データベース制約による整合性確保
- **可用性**: 99.9%の稼働率
- **セキュリティ**: 業界標準のセキュリティ対策実装

### 非機能品質
- **使いやすさ**: 直感的なユーザーインターフェース
- **レスポンシブ**: 各デバイスでの最適表示
- **アクセシビリティ**: WCAG 2.1 AA準拠
- **保守性**: 明確なアーキテクチャによる保守容易性

### テスト要件
- **単体テスト**: 90%以上のカバレッジ
- **統合テスト**: API・データベース連携テスト
- **E2Eテスト**: ユーザーシナリオの自動テスト
- **パフォーマンステスト**: 負荷テストによる性能検証

## 実装優先順位

### Phase 1（基盤構築）
1. プロジェクト初期化・環境構築
2. データベース設計・マイグレーション
3. 基本認証機能
4. マスタ管理機能（勘定科目、取引先）

### Phase 2（核心機能）
1. 仕訳作成機能
2. 仕訳照会・更新機能
3. 基本バリデーション
4. エラーハンドリング

### Phase 3（拡張機能）
1. 仕訳検索・一覧機能
2. 補助科目・分析コード機能
3. 高度なバリデーション
4. レポート機能（基本）

### Phase 4（品質向上）
1. パフォーマンス最適化
2. セキュリティ強化
3. ユーザビリティ改善
4. 運用監視機能

## 成功指標

### 技術指標
- **開発速度**: TaskMaster活用による30%の開発効率向上
- **品質指標**: バグ発生率10%以下
- **テストカバレッジ**: 90%以上維持
- **パフォーマンス**: 全画面2秒以内の初期表示

### ビジネス指標
- **ユーザー満足度**: 4.0/5.0以上
- **操作習得時間**: 新規ユーザー30分以内
- **データ正確性**: 仕訳エラー率0.1%以下
- **システム稼働率**: 99.9%以上

## 制約事項・前提条件

### 技術制約
- PostgreSQL 15以上必須
- Node.js 20以上必須
- モダンブラウザ対応（IE11非対応）

### ビジネス制約
- 日本の会計基準準拠
- 複式簿記原則の厳格な適用
- 個人情報保護法対応

### 運用制約
- 月次バックアップ必須
- セキュリティアップデート即座適用
- 利用ログの保管義務（3年間） 