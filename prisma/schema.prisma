// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// マスタテーブル群（完全camelCase統一）
// ============================================================================

// 勘定科目マスタ
model Account {
  accountCode       String   @id @db.VarChar(10)
  accountName       String   @db.VarChar(100)
  accountType       String   @db.VarChar(20)
  parentAccountCode String?  @db.VarChar(10)
  isDetail          Boolean  @default(true)
  isActive          Boolean  @default(true)
  sortOrder         Int?
  
  // 消費税関連フィールド
  isTaxAccount      Boolean  @default(false)                      // 消費税科目フラグ
  defaultTaxCode    String?  @db.VarChar(10)                     // デフォルト税区分コード
  
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 自己参照関係
  parentAccount Account?  @relation("AccountParent", fields: [parentAccountCode], references: [accountCode])
  childAccounts Account[] @relation("AccountParent")

  // 税区分マスタとの関係
  defaultTaxRate TaxRate? @relation(fields: [defaultTaxCode], references: [taxCode])

  // 他テーブルとの関係
  subAccounts    SubAccount[]
  journalDetails JournalDetail[]

  @@map("accounts")
}

// 補助科目マスタ
model SubAccount {
  subAccountCode String   @db.VarChar(15)
  accountCode    String   @db.VarChar(10)
  subAccountName String   @db.VarChar(100)
  isActive       Boolean  @default(true)
  sortOrder      Int?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  account        Account         @relation(fields: [accountCode], references: [accountCode])
  journalDetails JournalDetail[]

  // 複合主キー：勘定科目コード + 補助科目コードで一意
  @@id([accountCode, subAccountCode])
  @@map("sub_accounts")
}

// 取引先マスタ
model Partner {
  partnerCode   String   @id @db.VarChar(15)
  partnerName   String   @db.VarChar(100)
  partnerKana   String?  @db.VarChar(100)
  partnerType   String   @db.VarChar(20)
  postalCode    String?  @db.VarChar(8)
  address       String?  @db.VarChar(200)
  phone         String?  @db.VarChar(20)
  email         String?  @db.VarChar(100)
  contactPerson String?  @db.VarChar(50)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  journalDetails JournalDetail[]

  @@map("partners")
}

// 分析種別マスタ
model AnalysisType {
  typeCode   String   @id @db.VarChar(20)
  typeName   String   @db.VarChar(50)
  isActive   Boolean  @default(true)
  sortOrder  Int?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  
  // 関係
  analysisCodes AnalysisCode[]
  
  @@map("analysis_types")
}

// 分析コードマスタ
model AnalysisCode {
  analysisCode       String   @id @db.VarChar(15)
  analysisName       String   @db.VarChar(100)
  analysisType       String   @db.VarChar(20)
  parentAnalysisCode String?  @db.VarChar(15)
  isActive           Boolean  @default(true)
  sortOrder          Int?
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 自己参照関係
  parentAnalysisCode_rel AnalysisCode?  @relation("AnalysisCodeParent", fields: [parentAnalysisCode], references: [analysisCode])
  childAnalysisCodes     AnalysisCode[] @relation("AnalysisCodeParent")

  // 分析種別との関係
  analysisTypeRel AnalysisType @relation(fields: [analysisType], references: [typeCode])

  // 他テーブルとの関係
  journalDetails JournalDetail[]

  @@map("analysis_codes")
}

// 税区分マスタ
model TaxRate {
  taxCode   String   @id @db.VarChar(10)
  taxName   String   @db.VarChar(50)
  taxRate   Decimal  @db.Decimal(5, 2)
  isActive  Boolean  @default(true)
  sortOrder Int?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 他テーブルとの関係
  accounts       Account[]
  journalDetails JournalDetail[]

  @@map("tax_rates")
}

// ロールマスタ
model Role {
  roleCode    String   @id @db.VarChar(20)
  roleName    String   @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true)
  sortOrder   Int?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  users User[]

  @@map("roles")
}

// ユーザマスタ
model User {
  userId       String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userCode     String   @unique @db.VarChar(20)
  userName     String   @db.VarChar(100)
  userKana     String?  @db.VarChar(100)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @db.VarChar(255)
  roleCode     String   @db.VarChar(20)
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime? @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  role Role @relation(fields: [roleCode], references: [roleCode])
  workflowOrganizationUsers WorkflowOrganizationUser[]
  
  // 仕訳関連
  createdJournals  JournalHeader[] @relation("JournalCreatedBy")
  approvedJournals JournalHeader[] @relation("JournalApprovedBy")

  @@map("users")
}

// ワークフロー組織マスタ
model WorkflowOrganization {
  organizationCode String   @id @db.VarChar(20)
  organizationName String   @db.VarChar(100)
  description      String?  @db.Text
  isActive         Boolean  @default(true)
  sortOrder        Int?
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  workflowOrganizationUsers WorkflowOrganizationUser[]
  workflowRouteSteps        WorkflowRouteStep[]

  @@map("workflow_organizations")
}

// ワークフロー組織・ユーザ中間テーブル（多対多関係）
model WorkflowOrganizationUser {
  organizationCode String   @db.VarChar(20)
  userId           String   @db.Uuid
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  workflowOrganization WorkflowOrganization @relation(fields: [organizationCode], references: [organizationCode])
  user                 User                 @relation(fields: [userId], references: [userId])

  // 複合主キー
  @@id([organizationCode, userId])
  @@map("workflow_organization_users")
}

// ワークフロールートマスタ
model WorkflowRoute {
  routeCode      String   @id @db.VarChar(20)
  routeName      String   @db.VarChar(100)
  description    String?  @db.Text
  flowConfigJson Json     // ReactFlowの設定データ（JSON形式）
  isActive       Boolean  @default(true)
  sortOrder      Int?
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  workflowRouteSteps WorkflowRouteStep[]

  @@map("workflow_routes")
}

// ワークフロールート・ステップ中間テーブル（組織の順序関係）
model WorkflowRouteStep {
  routeCode        String   @db.VarChar(20)
  stepNumber       Int      // ステップの順序番号
  organizationCode String   @db.VarChar(20)
  stepName         String?  @db.VarChar(100)
  isRequired       Boolean  @default(true)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  workflowRoute        WorkflowRoute        @relation(fields: [routeCode], references: [routeCode])
  workflowOrganization WorkflowOrganization @relation(fields: [organizationCode], references: [organizationCode])

  // 複合主キー
  @@id([routeCode, stepNumber])
  @@map("workflow_route_steps")
}

// ============================================================================
// 仕訳テーブル群（完全camelCase統一）
// ============================================================================

// 仕訳ヘッダテーブル
model JournalHeader {
  journalNumber    String   @id @db.VarChar(15)
  journalDate      DateTime @db.Date
  description      String?  @db.Text
  totalAmount      Decimal  @default(0) @db.Decimal(15, 2)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  
  // ユーザ関連
  createdBy        String?  @db.Uuid
  
  // 承認フロー関連
  approvalStatus   String   @default("pending") @db.VarChar(20)  // pending, approved, rejected
  approvedBy       String?  @db.Uuid
  approvedAt       DateTime? @db.Timestamptz(6)
  rejectedReason   String?  @db.Text

  // 関係
  journalDetails   JournalDetail[]
  journalAttachments JournalAttachment[]
  createdUser      User?    @relation("JournalCreatedBy", fields: [createdBy], references: [userId])
  approvedUser     User?    @relation("JournalApprovedBy", fields: [approvedBy], references: [userId])

  @@map("journal_headers")
}

// 仕訳添付ファイルテーブル
model JournalAttachment {
  attachmentId     String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  journalNumber    String   @db.VarChar(15)
  fileName         String   @db.VarChar(255)
  originalFileName String   @db.VarChar(255)
  fileUrl          String   @db.VarChar(500)
  fileSize         BigInt                                              // ファイルサイズ（バイト）
  fileExtension    String   @db.VarChar(10)
  mimeType         String   @db.VarChar(100)
  uploadedAt       DateTime @default(now()) @db.Timestamptz(6)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  journalHeader JournalHeader @relation(fields: [journalNumber], references: [journalNumber], onDelete: Cascade)

  @@map("journal_attachments")
}

// 仕訳明細テーブル（消費税対応完全リデザイン）
model JournalDetail {
  journalNumber   String   @db.VarChar(15)
  lineNumber      Int
  debitCredit     String   @db.VarChar(1)
  accountCode     String   @db.VarChar(10)
  subAccountCode  String?  @db.VarChar(15)
  partnerCode     String?  @db.VarChar(15)
  analysisCode    String?  @db.VarChar(15)
  
  // 金額関連（完全リデザイン）
  baseAmount      Decimal  @db.Decimal(15, 2)                      // 本体額（税抜）※必須
  taxAmount       Decimal  @default(0) @db.Decimal(15, 2)          // 消費税額
  totalAmount     Decimal  @db.Decimal(15, 2)                      // 合計額（本体+税）
  
  // 消費税関連
  taxCode         String?  @db.VarChar(10)                         // 税区分コード
  isAutoGenerated Boolean  @default(false)                         // 自動生成仕訳フラグ
  parentLineNumber Int?                                            // 親仕訳の行番号（消費税仕訳用）
  
  lineDescription String?  @db.Text
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // 関係
  journalHeader   JournalHeader @relation(fields: [journalNumber], references: [journalNumber], onDelete: Cascade)
  account         Account       @relation(fields: [accountCode], references: [accountCode])
  subAccount      SubAccount?   @relation(fields: [accountCode, subAccountCode], references: [accountCode, subAccountCode])
  partner         Partner?      @relation(fields: [partnerCode], references: [partnerCode])
  analysisCodeRel AnalysisCode? @relation(fields: [analysisCode], references: [analysisCode])
  taxRate         TaxRate?      @relation(fields: [taxCode], references: [taxCode])
  
  // 自己参照（親仕訳との関係）
  parentLine      JournalDetail? @relation("TaxRelation", fields: [journalNumber, parentLineNumber], references: [journalNumber, lineNumber])
  childLines      JournalDetail[] @relation("TaxRelation")

  // 複合主キー
  @@id([journalNumber, lineNumber])
  @@map("journal_details")
}
